function [ToF_Paths] = generate_PathsToF(fixed_Paths, Grid)

%generate_PathsToF.m - Generate paths Time of Flight
%
%DESCRIPTION:
%Step 3 of the AUTOMATE algorithm, generates all the possible ToF of each
%leg and for all transfer types (I/O).
%
%INPUTS
%-fixed_Paths:
%   Fixed paths cell generated by fix_Paths.m
%-Grid:
%   Grid generated by generate_grid.m
%
%OUTPUTS
%-ToF_Paths:
%   Cell containing the list fixed paths, the resonances used (if
%   applicable), and the ToF matrix for all transfers types and all legs
%
%AUTHOR
%Hadrien AFSA
%
%--------------------------------------------------------------------------
    
    muSun=getAstroConstants('Sun', 'mu');

    ToF_Paths=cell(size(fixed_Paths,1),2);
    
    for i=1:size(fixed_Paths,1)
        seq=fixed_Paths{i,1};
        
        ToF_Paths{i,1}=seq;

        legs_ToF=zeros(length(seq)-1,4);
        num_reso=1;

        % Checks all the legs
        for s=2:length(seq)
            %disp("#############################");

            prev=seq(s-1,:);
            curr=seq(s,:);

            % Consecutive flyby of the same planet (resonance)
            if prev(1)==curr(1)
                % Resonance number 'num_reso'

                % Computes the period of the planet
                [~,~,pl_sma]=planetConstants(curr(1));
                tau_pl = 2*pi*sqrt(pl_sma^3/muSun);

                % Computes the resonance ToF
                reso_n = fixed_Paths{i,2}(num_reso);
                reso_tof = tau_pl*reso_n;

                % Adds it to the total ToF of the leg
                legs_ToF(s-1,:)=[reso_tof reso_tof reso_tof reso_tof];%./(24*3600);

                % Prepares for potential next resonance
                num_reso=num_reso+1;

            else
                % Finds the intersection and the corresponding alpha
                inter=check_intersectionGrid(prev(1), prev(2), curr(1), curr(2), Grid);
                if curr(1)>prev(1)
                    alpha = inter(5);
                else
                    alpha = inter(2);
                end

                % Computes the orbit parameters
                [ra, rp] = alphaVinf2raRp(alpha, curr(2), curr(1));
                a=(ra+rp)/2;
                e=ra/a - 1;
                n=sqrt(muSun/(a^3));
                tau=2*pi/n;

                % Gets the planets constants
                [~,~,sma_1_tmp]=planetConstants(prev(1));
                [~,~,sma_2_tmp]=planetConstants(curr(1));

                % Index 1 is always the inner planet
                sma_1=min(sma_1_tmp,sma_2_tmp);
                sma_2=max(sma_1_tmp,sma_2_tmp);

                % Computes the true and eccentric anomalies (cf. Strange & Longuski)
                theta_1=acos((1/e) * ((a*(1-e^2)/sma_1) - 1));
                E_1=2*atan(sqrt((1-e)/(1+e))*tan(theta_1/2));

                theta_2=acos((1/e) * ((a*(1-e^2)/sma_2) - 1));
                E_2=2*atan(sqrt((1-e)/(1+e))*tan(theta_2/2));

                t1 = (1/n) * (E_1 - e*sin(E_1));
                t2 = (1/n) * (E_2 - e*sin(E_2));

                % Trip towards outer planet (Up transfer)
                if curr(1)>prev(1)            
                    %%%%%%% Up ToF (cf. Strange & Longuski) %%%%%%%       
                    ToF_OO = t2 - t1;
                    ToF_OI = tau - t2 - t1;
                    ToF_IO = t1 + t2;
                    ToF_II = tau - t2 + t1;

                % Trip towards inner planet (Down transfer)
                elseif curr(1)<prev(1)            
                    %%%%%%% Down ToF (cf. Strange & Longuski) %%%%%%%    
                    ToF_OO = tau - t2 + t1;
                    ToF_OI = tau - t2 - t1;
                    ToF_IO = t1 + t2;
                    ToF_II = t2 - t1;

                else
                    disp("Error#5");
                end

                % Saves the different ToF (in previous order)
                legs_ToF(s-1,:)= [ToF_OO ToF_OI ToF_IO ToF_II];%./(24*3600);

            end
        end

        % Saves all the ToFs 
        ToF_Paths{i,2}=legs_ToF;
        
        % Saves the resonances
        ToF_Paths{i,3}=fixed_Paths{i,2};

        if mod(i,10000)==0
            fprintf("Computing ToF: %d/%d\n", i, length(fixed_Paths));
        elseif i==length(fixed_Paths)
            fprintf("\nComputing ToF finished!\n");
        end
    end

    ToF_Paths=ToF_Paths(~cellfun('isempty',ToF_Paths(:,1)),:);
    
end

