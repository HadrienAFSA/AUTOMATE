function plotContoursInters(IDS, vinflevels, Grid, plot_inter, plot_tickmarks, plot_reso)
%plotContoursInters.m - Plot TG, contours, intersections, tickmarks and
%resonances
%
%DESCRIPTION:
%Plots the TG intersections and the intersections of contours, maximum
%flyby tickmarks and resonances.
%
%INPUTS
%-IDS:
%   List of the planets' IDs.
%-vinflevels (km/s):
%   Infinity velocity levels.
%-Grid:
%   Grid generated by generate_Grid.m.
%-plot_inter:
%   Boolean. 1 to plot the intersections of the contour on the TG, 0 not to. 
%-plot_tickmarks:
%   Boolean. 1 to plot the tickmarks of maximum flyby on the contour on the TG, 0 not to.
%-plot_reso:
%   Boolean. 1 to plot the resonances used on the TG, 0 not to. 
%
%AUTHORS
%Hadrien AFSA, Andrea Bellome.
%
%--------------------------------------------------------------------------

    % Plot settings
    hold on;

    set(gca,'Color','w')
    set(gcf,'color','w');
    set(gca, 'XScale', 'log')
    set(gca, 'YScale', 'log')
    set(gca, 'XTick', [1:100])
    set(gca, 'YTick', cat(2,[1:10],10.*[2:10]))
    grid on

    % plot limits
    idMIN = min(IDS);
    idMAX = max(IDS);
    XLIM=[0.15 0.7; 0.25 0.75; 0.3 1.15; 0.35 1.65; 0.5 5.5; 0.5 10; 0.5 20; 0.5 20];
    YLIM=[0.3 1; 0.6 3; 0.9 6; 1.4 20; 4 310; 4 310; 4 310; 4 310];
    xlim([XLIM(idMIN,1) XLIM(idMAX,2)]);
    ylim([YLIM(idMIN,1) YLIM(idMAX,2)]);

    xlabel('r_p - AU'); ylabel('r_a - AU');


    au=getAstroConstants('AU');

    for indplanet = 1:length(IDS)
        idpl = IDS(indplanet);

        if idpl == 1
            COLOR = [0 0.45 0.74];
        elseif idpl == 2
            COLOR = [0.09 0.74 1];
        elseif idpl == 3
            COLOR = [0 0.5 0];
        elseif idpl == 4
            COLOR = [0.64 0.08 0.08];
        elseif idpl == 5
            COLOR = [0.86 0.38 0.13];
        elseif idpl == 6
            COLOR = [0.5 0.2 0.6];
        elseif idpl == 7
            COLOR = [0 0  1];
        elseif idpl == 8
            COLOR = [0.9 0 0.52];
        end
        %COLOR=[0 0 0];

        for indi = 1:length(vinflevels)
            vinf=vinflevels(indi);
            [rascCONT, rpscCONT] = generateContours(idpl, vinf);


            hold on;
            if indi == 1
                plot(rpscCONT./au,rascCONT./au, 'Color', COLOR, 'LineWidth', 1.1);
            else
                plot(rpscCONT./au, rascCONT./au, 'Color', COLOR, 'handlevisibility', 'off', 'LineWidth', 1.1);
            end

            % Plot tick marks
            if plot_tickmarks
                [mu,radius]=planetConstants(idpl);
                [hmin,~]=maxmin_flybyAltitude(idpl);
            
                max_e = 1 + ((radius+hmin)*vinf^2)/mu;
                max_alpha = 2*asin(1/max_e);

                range_alpha=0:max_alpha:pi;

                for a=1:length(range_alpha)
                    alphatmp=range_alpha(a);

                    [ratm,rptm]=alphaVinf2raRp(alphatmp,vinf,idpl);
                    plot(rptm/au,ratm/au,'.','MarkerSize',10,'Color', COLOR);

                end
            end

            % Plot resonances
            if plot_reso
                ls_reso = find_resonance(idpl);
  
                for reso=1:size(ls_reso,1)
                    n=ls_reso(reso,1);
                    m=ls_reso(reso,2);
                    
                    [rare, rpre]=resonanceVinf2raRp(n, m, vinf, idpl);

                    [resmark,resosize]=reso2marker([n m]);
                    
                    %plot(rpre/au,rare/au,strcat('k',resmark),'MarkerSize',resosize);
                    plot(rpre/au,rare/au,'.','MarkerSize',6, 'Color', COLOR);

                end
            end
        end
    end



    % Plots the intersections
    if plot_inter
        for i=1:size(Grid,1)
            grid_temp=Grid(i,:);
            [ra,rp]=alphaVinf2raRp(grid_temp(2),grid_temp(3),grid_temp(1));
            plot(rp/au,ra/au,'k.','MarkerSize',10);
        end
    end


    function [resmarker, ressize]=reso2marker(nm)

        list_nm = [1 1; 2 1; 3 1; 1 2; 1 3; 2 3; 3 2; 3 4];
        
        t1=5;
        t2=12;
        marker_reso=        ['.',    '*',    'o',    'x',    's',    '^',    'v',    '<',    '>',    'p',    'h'];
        marker_size_reso=   [t2      t1      t1      6      6      t1      t1      t1      t1      t1      t1];
   

        for ress=1:size(list_nm,1)

            if isequal(nm, list_nm(ress,:))
                resmarker=marker_reso(ress);
                ressize=marker_size_reso(ress);

                return
            else
                
                %disp('Error');
            end
        end
    end


end





















